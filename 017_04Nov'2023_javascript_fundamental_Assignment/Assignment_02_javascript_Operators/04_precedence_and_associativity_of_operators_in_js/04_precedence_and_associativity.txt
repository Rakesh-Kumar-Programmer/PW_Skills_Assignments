precedence and associativity of operators :-

Operator precedence determines the order in which operators are evaluated in an expression. It helps to resolve any ambiguity in calculations.

Operator Precedence: Operators in JavaScript follow a specific precedence, where certain operators are evaluated before others. 
For example, multiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-). If there are multiple operators in an expression, JavaScript evaluates them based on their precedence rules. Parentheses can be used to override the default precedence and control the order of evaluation.

Operator Associativity: Operator associativity defines the order in which operators with the same precedence are evaluated. JavaScript has left-to-right associativity for most operators, meaning that if there are multiple operators with the same precedence, they are evaluated from left to right.
Understanding operator precedence and associativity is important as it ensures that expressions are evaluated correctly and produce the desired results.

Example: 

// left-to-right associativity : division 
3/4


// right-to-left associativity : assignment 
a = 3 

precedence and associativity is important for several reasons:

(1) correct expression evaluation
(2) Predictable code
(3) Debugging and trableshooting
(4) optimizing code
